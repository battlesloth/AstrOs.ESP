#ifndef ASTROSSERIALMESSAGESERVICE_H
#define ASTROSSERIALMESSAGESERVICE_H

#include <string>
#include <vector>
#include <cstdint>

#define SERIAL_MESSAGE_HEADER_SIZE 3

//|--type--|--validation--|---msg Id---|---------------payload-------------|
//|--int---RS---string----RS--string---GS--val--US--val--RS--val--US--val--|

// Serial Contansts
namespace AstrOsSC
{
    constexpr const static char *REGISTRATION_SYNC = "REGISTRATION_SYNC";
    constexpr const static char *REGISTRATION_SYNC_ACK = "REGISTRATION_SYNC_ACK";
    constexpr const static char *POLL_ACK = "POLL_ACK";
    constexpr const static char *POLL_NAK = "POLL_NAK";
    constexpr const static char *DEPLOY_SCRIPT = "DEPLOY_SCRIPT";
    constexpr const static char *DEPLOY_SCRIPT_ACK = "DEPLOY_SCRIPT_ACK";
    constexpr const static char *DEPLOY_SCRIPT_NAK = "DEPLOY_SCRIPT_NAK";
    constexpr const static char *RUN_SCRIPT = "RUN_SCRIPT";
    constexpr const static char *RUN_SCRIPT_ACK = "RUN_SCRIPT_ACK";
    constexpr const static char *RUN_SCRIPT_NAK = "RUN_SCRIPT_NAK";
    constexpr const static char *RUN_COMMAND = "RUN_COMMAND";
    constexpr const static char *RUN_COMMAND_ACK = "RUN_COMMAND_ACK";
    constexpr const static char *RUN_COMMAND_NAK = "RUN_COMMAND_NAK";
}

enum class AstrOsSerialMessageType
{
    UNKNOWN,
    REGISTRATION_SYNC, // from web server
    REGISTRATION_SYNC_ACK,
    POLL_ACK,
    POLL_NAK,
    DEPLOY_SCRIPT, // from web server
    DEPLOY_SCRIPT_ACK,
    DEPLOY_SCRIPT_NAK,
    RUN_SCRIPT, // from web server
    RUN_SCRIPT_ACK,
    RUN_SCRIPT_NAK,
    RUN_COMMAND, // from web server
    RUN_COMMAND_ACK,
    RUN_COMMAND_NAK
};

typedef struct
{
    std::string name;
    std::string mac;
    std::string fingerprint;
} astros_peer_data_t;

typedef struct
{
    std::string msgId;
    AstrOsSerialMessageType type;
    bool valid;
} astros_serial_msg_validation_t;

class AstrOsSerialMessageService
{
private:
    static std::string generateHeader(AstrOsSerialMessageType type, std::string msgId);
    static const char *getValidationString(AstrOsSerialMessageType type);

public:
    AstrOsSerialMessageService();
    ~AstrOsSerialMessageService();

    static astros_serial_msg_validation_t validateSerialMsg(std::string msg);

    static std::string getRegistrationSyncAck(std::string msgId, std::vector<astros_peer_data_t> controllers);
    static std::string getPollAck(std::string controller, std::string fingerprint);
    static std::string getPollNak(char *controller);
    static std::string getRegistrationBasicAckNak(AstrOsSerialMessageType type, std::string msgId, std::string controller, std::string id);

    // methods for testing, these messages are generated by the web server
    static std::string getRegistrationSync(std::string msgId);
    static std::string getDeployScript(std::string msgId, std::string scriptId, std::vector<std::string> controllers, std::vector<std::string> scripts);
    static std::string getRunScript(std::string msgId, std::string scriptId);
    static std::string getRunCommand(std::string msgId, std::string controller, std::string command);
};

#endif